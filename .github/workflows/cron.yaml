name: Daily PostHog Export

on:
  schedule:
    - cron: '0 15 * * *'  # Runs at 7:00 PST every day
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  export-data:
    runs-on: macos-15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Build and run analytics package
      #   run: |
      #     swift run analytics
      #   env:
      #     POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
      #     POSTHOG_PROJECT_ID: ${{ secrets.POSTHOG_PROJECT_ID }}
      #     AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
      #     AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
      #     AIRTABLE_MODELS_TABLE_ID: ${{ secrets.AIRTABLE_MODELS_TABLE_ID }}

      # - name: Configure Git
      #   run: |
      #     git config --local user.email "github-actions[bot]@users.noreply.github.com"
      #     git config --local user.name "github-actions[bot]"

      # - name: Commit and push changes
      #   run: |
      #     git add Sources/gensite/
      #     git commit -m "Update PostHog export data" || echo "No changes to commit"
      #     git push origin main
      #     echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      # Deploy to Jekyll
      - name: Install Tailwind CSS
        run: npm install -D tailwindcss@3
      - name: Generate site
        run: swift run gensite && npx tailwindcss -i tailwind.css -o ./site/css/main.css --minify
      # - name: Setup Pages
      #   uses: actions/configure-pages@v5
      # - name: Upload artifact
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: './site'
      # - name: Deploy to GitHub Pages
      #   id: deployment
      #   uses: actions/deploy-pages@v4

      - name: Read Discord message
        id: discord_message
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "DISCORD_CONTENT<<$EOF" >> $GITHUB_OUTPUT
          echo $(cat discord_message.txt) >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        env:
          DISCORD_CONTENT: ${{ steps.discord_message.outputs.DISCORD_CONTENT }}
        with:
          webhook: ${{ secrets.DISCORD_LEADERBOARD_WEBHOOK_URL }}
          content: $DISCORD_CONTENT
          status: ${{ job.status }}
          title: "ðŸ“Š Leaderboard Update"
