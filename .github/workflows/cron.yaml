name: Daily PostHog Export

on:
  schedule:
    - cron: '0 15 * * *'  # Runs at 7:00 PST every day
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  export-data:
    runs-on: macos-15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and run analytics package
        run: |
          swift run analytics
        env:
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          POSTHOG_PROJECT_ID: ${{ secrets.POSTHOG_PROJECT_ID }}
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
          AIRTABLE_MODELS_TABLE_ID: ${{ secrets.AIRTABLE_MODELS_TABLE_ID }}

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Commit and push changes
        run: |
          git add Sources/gensite/
          git commit -m "Update PostHog export data" || echo "No changes to commit"
          git push origin main
          echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      # Site deployment below â€” must stay in sync with deploy.yml

      - name: Install dependencies
        run: bash ./scripts/install_dependencies.sh

      # Cache the workspace directory containing cloned repositories
      - name: Cache workspace repositories
        id: cache-workspace
        uses: actions/cache@v3
        with:
          path: workspace
          # The cache key depends on the day of month to refresh cache periodically
          # This ensures a fresh clone every month while using cache for daily updates
          key: ${{ runner.os }}-workspace-v2-${{ github.run_id }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-workspace-v2-

      - name: Create workspace directory if it doesn't exist
        if: steps.cache-workspace.outputs.cache-hit != 'true'
        run: mkdir -p workspace

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo DEBIAN_FRONTEND=noninteractive apt update \
          && sudo DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends gh -y

      - name: Authenticate with GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Setup workspace
        run: bash ./scripts/setup_workspace.sh
      - name: Generate site
        run: bash ./scripts/generate_site.sh
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './site'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Read Discord message
        id: discord_message
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "DISCORD_CONTENT<<$EOF" >> $GITHUB_OUTPUT
          echo "$(perl -pe 's/\n/\\n/' discord_message.txt)" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - uses: sarisia/actions-status-discord@v1
        if: always()
        id: webhook
        env:
          DISCORD_CONTENT: ${{ steps.discord_message.outputs.DISCORD_CONTENT }}
        with:
          nofail: false
          ack_no_webhook: true
          content: ${{ env.DISCORD_CONTENT }}
          status: ${{ job.status }}
          title: "ðŸ“Š Leaderboard Update"

      - run: npm install axios
      - uses: actions/github-script@v7
        env:
          WEBHOOK_PAYLOAD: ${{ steps.webhook.outputs.payload }}
          WEBHOOK_URL: ${{ secrets.DISCORD_LEADERBOARD_WEBHOOK_URL }}
        with:
          script: |
            const axios = require("axios")

            const { WEBHOOK_PAYLOAD, WEBHOOK_URL } = process.env

            const payload = JSON.parse(WEBHOOK_PAYLOAD)

            if (payload.content) {
              payload.content = payload.content.replace(/\\n/g, '\n')
            }

            // send to Discord
            axios.post(WEBHOOK_URL, payload)
